#####################################
# Site Names and server address
#####################################
# Top Level root .. Allows subservers

[servers]
# Allow site admins to configure a number of parallel servers
# per machine.  Can be used with proxying server such as
# apache, haproxy, nginx etc..
backend = paster
# backend = uwsgi

# control which servers are active 
#servers = h1,h2,h3,h4,e1
servers = h1
# Server definitions 
# url = full url to proxy server 
# services_enabled  = list of bisque_service to enable
# services_disabled = list of bisque_service to disable
# proxyroot =  the value of bisque.root for engines 

h1.url = http://localhost:8080
# h1.server = :3031
# h1.server = unix:///tmp/bisque.sock
h1.services_disabled = engine_service
#h2.url = http://localhost:9092
#h2.services_disabled = engine_service
#h3.url = http://localhost:9093
#h3.services_disabled = engine_service
#h4.url = http://localhost:9094
#h4.services_disabled = engine_service

# Engine on this host
# Each engine must have the proxyroot parameter set
# e1.url = http://biobisque.org:27000
# e1.server = unix:///tmp/engine.sock
# e1.server = :3091
# e1.services_enabled = engine_service
# e1.proxyroot = http://biobisque.org

# Define where the logs and PID files will go (otherwise will create in local dir)
#log_dir = /var/log/bisque
#pid_dir = /var/run/bisque


###############################
# Extra filters to be added 
#[filter:linesman]
# Linesname can be used for profiling
#use = egg:linesman#profiler


[app:main]
# pylons/paster config 
use = egg:bqcore
full_stack = true
#filter-with = linesman

##########################################################
# Bisque Configuration 
##########################################################
# Visible titles
bisque.organization = ORG
bisque.title = BioImage Repository
bisque.admin_email = admin@nowhere.com
bisque.welcome_message = Welcome to the Bisque database
#bisque.background_query = welcome_background:

# tags used by the front page for site contents overview
bisque.welcome_tags=Types of images:image_type;Experimenters:experimenter;Species:species;

# server defaults
bisque.root = http://localhost:8080
bisque.server = http://localhost:8080
bisque.services_disabled = engine_service
#bisque.services_enabled = client_service
bisque.site = http://localhost:8080
bisque.installed = pending
bisque.paths.root  = 
#bisque.paths.data  = installationdir/data
#bisque.paths.config  = installationdir/config


# Blobservice
# Ordered list of stores .. path is created based on template
# bisque.blob_service.stores = irods1,s3,local
bisque.blob_service.stores=local
bisque.stores.local.path = file:$datadir/imagedir/$user/$dirhash/$filehash-$filename
#bisque.stores.local.top= file:$datadir/imagedir
# Example irods store
#bisque.stores.irods1.path=irods://data.iplantcollaborative.org/iplant/home/$user/bisque_data/uploads/$dirhash/$filehash-$filename, 
#bisque.stores.irods1.user=bisque
#bisque.stores.irods1.password=<guess>
#bisque.stores.irods1.readonly = true
# example S3
#bisque.stores.s3.path=s3://$user-$filehash-$filename
#bisque.stores.s3.access_key = None
#bisque.stores.s3.secret_key = None
#bisque.stores.s3.bucket_id = None
#bisque.stores.s3.location = us-west

# Data service
#bisque.data_service.caching=true
#bisque.data_service.server_cache=.server_cache
#bisque.data_service.max_response_time = 0
# Module Service
#bisque.module_service.queue_wait =  5
# Engine Service
bisque.engine =  http://localhost:8080
#bisque.engine_service.local_modules = modules
# Image Service
#bisque.image_service.work_dir  = ./data//workdir
#bisque.image_service.upload_dir  = ./data/uploads
#bisque.image_service.thumbnail_command = -depth 8,d -page 1 -display
#bisque.image_service.default_command = -depth 8,d
#bisque.image_service.remove_uploads = False
# HTTP client
#bisque.http_client.cache_dir = data/client_cache

# Google site statistics key.
# Register at google and place key here to get site stats
#bisque.google_analytics="UA-3923721-1"
#
# Login identification  systems
# note: you must also edit who.ini to enable these 
#bisque.login.identifiers = cas,google,local
bisque.login.identifiers = local
bisque.login.local = /auth_service/login
#bisque.login.cas = /auth_service/login_handler?login_type=cas
#bisque.login.google = /auth_service/openid_login_handler
#bisque.password = hashed

# Bisque Cluster Runtime  
condor.enabled = False
condor.dag_template =
condor.submit_template =
condor.dag_config_template =
runtime.staging_base =
runtime.matlab_home =
runtime.mode = command


###############################################################
# Package dependencies config

# Beaker Sessions Config
# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
#beaker.cache.data_dir = %(here)s/data/cache
#beaker.session.data_dir = %(here)s/data/sessions
cache_dir = %(here)s/data
beaker.session.key = bq
beaker.session.secret = somesecret

# Paster  Config
error_email_from=bisque@localhost
email_to=bisque-dev@biodev.ece.ucsb.edu
error_subject_prefix=Bisque Error:
error_message = An Unexpected exception:
smtp_server=localhost

# TGExt.Registration2 Config
registration_config = %(here)s/registration.cfg
registration.site_name = Bisque
registration.mail.admin_email = admin@nowhere.com
registration.host = http://localhost:8080
registration.mail.smtp_server = localhost

# TurboMail Config
mail.on = false
mail.smtp.server = localhost
mail.manager = immediate
mail.transport = smtp

# SQLAlchemy
sqlalchemy.url = sqlite:///bisque.db
#sqlalchemy.url = postgresql://localhost:5432/bisque05
sqlalchemy.echo = false
sqlalchemy.echo_pool = false
sqlalchemy.pool_recycle = 3600

# Repoze.who stuff
#  log_level is  'debug', 'info', 'warning', 'error' 
#  log_file  is [ 'stdout' or path/to/who.log ] 
who.config_file = %(here)s/who.ini
who.log_level = error
who.log_stream = stdout

# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
set debug = false

# if you are using Mako and want to be able to reload
# the mako template from disk during the development phase
# you should say 'true' here
# This option is only used for mako templating engine
# WARNING: if you want to deploy your application using a zipped egg
# (ie: if your application's setup.py defines zip-safe=True, then you
# MUST put "false" for the production environment because there will
# be no disk and real files to compare time with.
# On the contrary if your application defines zip-safe=False and is
# deployed in an unzipped manner, then you can leave this option to true
templating.mako.reloadfromdisk = true

# the compiled template dir is a directory that must be readable by your
# webserver. It will be used to store the resulting templates once compiled
# by the TemplateLookup system.
# During development you generally don't need this option since paste's HTTP
# server will have access to you development directories, but in production
# you'll most certainly want to have apache or nginx to write in a directory
# that does not contain any source code in any form for obvious security reasons.
templating.mako.compiled_templates_dir = %(here)s/data/templates



#turn this setting to "min" if you would like tw to produce minified
#javascript files (if your library supports that)
toscawidgets.framework.resource_variant=debug


################################################################################
# Logging configuration
# Add additional loggers, handlers, formatters here
# Uses python's logging config file format
# http://docs.python.org/lib/logging-config-fileformat.html
# ERROR WARN INFO DEBUG
################################################################################

[loggers]
keys = root, bq, sqlalchemy, auth

[handlers]
#keys = console, syslog, file, timedfile, pylog
keys = console

[formatters]
#keys = generic, syslog, full
keys = generic

###########################
# Loggers 
# If you create additional loggers, add them as a key to [loggers] above

[logger_root]
level = INFO
#handlers = console, syslog
handlers = console

[logger_bq]
level = INFO
handlers =
qualname = bq

#[logger_bq_imgsrv]
#level = DEBUG
#handlers =
#qualname = bq.imgsrv


[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[logger_sqlalchemy_pool]
level = INFO
handlers =
qualname = sqlalchemy.pool
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)


# A logger for authentication, identification and authorization -- this is
# repoze.who and repoze.what:
[logger_auth]
level = INFO
handlers =
qualname = auth

#######################################
# Handlers
# If you create additional handlers, add them as a key to [handlers]
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

#[handler_file]
#class=handlers.RotatingFileHandler
#level=NOTSET
#formatter=generic
## Create bisque.log with 100MB max size and keeps 14 previous version
#args=('bisque.log', 'a', 100*1024*1024, 14)

#[handler_timedfile]
#class=handlers.TimedRotatingFileHandler
#level=NOTSET
#formatter=generic
## Create bisque.log with 7 days/log and 14 weeks of backups
#args=('bisque.log', 'D', 7, 14)

#[handler_syslog]
#class=handlers.SysLogHandler
#level=NOTSET
#args=(('localhost', handlers.SYSLOG_UDP_PORT), handlers.SysLogHandler.LOG_LOCAL1)
#args=('/dev/log',handlers.SysLogHandler.LOG_LOCAL1)
#formatter= generic


#[handler_pylog]
## Install a SocketListener like python-loggingserver 
#class= handlers.SocketHandler
#level=INFO
#formatter=generic
#args=('localhost', handlers.DEFAULT_TCP_LOGGING_PORT)

#########################################
# Formatters
# If you create additional formatters, add them as a key to [formatters]
[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

#[formatter_full]
#format = %(asctime)s,%(msecs)03d:%(process)d-%(thread)x: %(levelname)-5.5s [%(name)s] %(message)s
#datefmt = %H:%M:%S

#[formatter_syslog]
#format = %(levelname)s [%(name)s] %(message)s

